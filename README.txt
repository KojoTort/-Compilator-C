Как это работает и что это вообще?

Lexer (Лексический анализатор)

Лексический анализатор берет на вход исходный код на языке C и разбивает его на отдельные токены. Токены - это основные элементы языка, такие как ключевые слова, идентификаторы, литералы, символы и т.д.

В этом коде лексический анализатор использует регулярные выражения для поиска соответствий в исходном коде. Он находит токены, соответствующие определенным шаблонам, и создает список токенов с информацией о типе и значении каждого токена.

Parser (Синтаксический анализатор)

Синтаксический анализатор берет на вход список токенов, созданный лексическим анализатором, и строит абстрактное синтаксическое дерево (AST) программы. AST - это иерархическая структура, которая отражает синтаксическую структуру программы.

В этом коде синтаксический анализатор использует рекурсивный спуск для построения AST. Он начинает с корневого узла программы и рекурсивно вызывает функции для построения поддеревьев для каждого типа узла.

CodeGenerator (Генератор кода)

Генератор кода берет на вход AST, созданный синтаксическим анализатором, и генерирует код на языке C, соответствующий этому AST.

В этом коде генератор кода использует рекурсивный спуск для генерации кода. Он начинает с корневого узла программы и рекурсивно вызывает функции для генерации кода для каждого типа узла.

Основной процесс

Основной процесс компиляции происходит следующим образом:

Лексический анализатор разбивает исходный код на токены.
Синтаксический анализатор строит AST на основе токенов.
Генератор кода генерирует код на языке C на основе AST.
В этом примере кода функция compile_c_code берет на вход исходный код на языке C и возвращает список токенов, созданных лексическим анализатором. Затем можно использовать эти токены для построения AST и генерации кода.

Вывод программы - это список токенов, созданных лексическим анализатором, с информацией о типе и значении каждого токена.

P.S Никогда не пишите компиляторы я очень устал и потратил на это 4 часа
